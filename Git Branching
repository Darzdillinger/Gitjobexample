Concept: Git Branching

With Git Branching, developers can work on specific features or fixes outside of the main codebase without affecting the main branch, which is usually main or master. Teams may work on features, bug fixes, and new concept experiments simultaneously because each branch represents a distinct development path. As needed, branches can be added, removed, switched, and combined. This methodology promotes collaboration among team members and aids in the upkeep of a tidy, trustworthy codebase.

You can work on a new feature or solve a bug without impacting the ongoing project by using branches. The branch can be merged back into the main branch once the changes have been finished and confirmed. By ensuring that only well examined and reliable code is added to the Â primary project, this procedure fosters a more organized and manageable development workflow.


Procedure: Merging a Branch in Git

Step 1 cd path/to/repository   // switching to main branch
			
			then 
			
			git checkout main

Step 2 git pull origin main  // updatong local branch

Step 3 git merge feature-branch-name   // merging the feature branch

Step 4 git commit -m "Merged feature-branch-name into main"  //committing the merge

Step 5 git push origin main  // comitting the changes